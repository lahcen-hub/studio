/**
 * @fileoverview Firestore Security Rules for the cargo calculation application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for calculations. Each calculation
 * is associated with a specific user, and only that user can read, create, update, or delete it.
 *
 * Data Structure:
 * Calculations are stored in the `/calculations/{calculationId}` collection. Each calculation
 * document must contain a `uid` field that matches the user's ID.
 *
 * Key Security Decisions:
 * - Users can only access their own calculations.
 * - Data validation focuses on ownership and relational integrity, not on comprehensive schema validation.
 *
 * Denormalization for Authorization:
 * The `uid` field within the calculation document is used to directly enforce ownership,
 * avoiding the need for complex queries or additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual calculation documents.
     * @path /calculations/{calculationId}
     * @allow (get, list) User with ID 'user_abc' can read a calculation document if its 'uid' field matches their ID.
     * @allow (create) User with ID 'user_abc' can create a calculation document with their 'uid' as the 'uid' field.
     * @allow (update, delete) User with ID 'user_abc' can update or delete a calculation document if its 'uid' field matches their ID, and the document exists.
     * @deny (get, list) User with ID 'user_xyz' cannot read a calculation document if its 'uid' field is 'user_abc'.
     * @deny (create) User with ID 'user_xyz' cannot create a calculation document with the 'uid' field set to 'user_abc'.
     * @deny (update, delete) User with ID 'user_xyz' cannot update or delete a calculation document whose 'uid' field is 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /calculations/{calculationId} {
      // Helper function to check if the current user is the owner of the calculation.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the current user is the owner of the calculation and the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read permissions: Allow the owner to get and list calculations.
      allow get: if true;
      allow list: if isSignedIn();

      // Write permissions: Allow the owner to create, update, and delete calculations.
      allow create: if isOwner(request.resource.data.uid);
      allow update: if isExistingOwner(resource.data.uid) && resource.data.uid == request.resource.data.uid;
      allow delete: if isExistingOwner(resource.data.uid);
    }

    // Define a global function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}