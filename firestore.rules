/**
 * @fileoverview Firestore Security Rules for the cargo calculation application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where each user can only access their own calculation data.
 *
 * Data Structure:
 * All calculation data is stored in the `/calculations/{calculationId}` collection. Each document represents a calculation and must contain a `uid` field matching the user's ID.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete calculations that they own.
 * - Listing all calculations is restricted to prevent unauthorized data access.
 *
 * Denormalization for Authorization:
 * The `uid` field is denormalized directly onto the `Calculation` document to enable simple ownership checks without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /calculations/{calculationId} collection, enforcing user-based ownership.
     * @path /calculations/{calculationId}
     * @allow (create) - A user with UID 'user_abc' can create a calculation if the 'uid' field in the document matches 'user_abc'.
     * @allow (get) - A user with UID 'user_abc' can get a calculation if the 'uid' field in the document matches 'user_abc'.
     * @allow (update) - A user with UID 'user_abc' can update a calculation if the 'uid' field in the document matches 'user_abc' and the document exists.
     * @allow (delete) - A user with UID 'user_abc' can delete a calculation if the 'uid' field in the document matches 'user_abc' and the document exists.
     * @deny (create) - A user with UID 'user_xyz' cannot create a calculation with the 'uid' field set to 'user_abc'.
     * @deny (get) - A user with UID 'user_xyz' cannot get a calculation if the 'uid' field in the document is set to 'user_abc'.
     * @deny (update) - A user with UID 'user_xyz' cannot update a calculation if the 'uid' field in the document is set to 'user_abc', even if the document exists.
     * @deny (delete) - A user with UID 'user_xyz' cannot delete a calculation if the 'uid' field in the document is set to 'user_abc', even if the document exists.
     * @principle Enforces document ownership for all operations.
     */
    match /calculations/{calculationId} {
      allow get: if isSignedIn() && isOwner(resource.data.uid);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.uid);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.uid);
    }

  }

  // --- Helper functions ---

  /**
   * @description Checks if the user is signed in.
   * @return {bool} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user ID matches the authenticated user's ID.
   * @param {string} userId The user ID to check.
   * @return {bool} True if the user ID matches the authenticated user's ID, false otherwise.
   */
  function isOwner(userId) {
    return userId == request.auth.uid;
  }

    /**
   * @description Checks if the user is the owner of an existing document.
   * @param {string} userId The user ID to check.
   * @return {bool} True if the user ID matches the authenticated user's ID and the document exists.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}