/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy
 * This ruleset enforces a strict user-ownership model for calculations. Users can only
 * create, read, update, and delete calculations that they own.  Data structure prototyping is allowed.
 *
 * @Data Structure
 * All calculation data is stored in the `/calculations/{calculationId}` collection.
 * Each calculation document must contain a `uid` field that matches the user's UID.
 *
 * @Key Security Decisions
 * - Calculations are private to the user who created them.
 * - List operations are restricted to the owner of the calculations.
 * - The `uid` field in each calculation document is used to enforce ownership.
 * - The schema of the calculation document is not strictly enforced, allowing for flexible
 *   data shapes during the prototyping phase.
 *
 * @Denormalization for Authorization
 * The `uid` field within the `/calculations/{calculationId}` document is used for direct
 * authorization checks, avoiding the need for additional reads or complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual calculation documents.
     * @path /calculations/{calculationId}
     * @allow (create) User with UID 'user_abc' can create a calculation with calculationId 'calc_123' if the calculation document contains 'uid': 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read a calculation with calculationId 'calc_123' if the calculation document contains 'uid': 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a calculation with calculationId 'calc_123' if the calculation document contains 'uid': 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a calculation with calculationId 'calc_123' if the calculation document contains 'uid': 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a calculation with calculationId 'calc_123' if the calculation document contains 'uid': 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read a calculation with calculationId 'calc_123' if the calculation document contains 'uid': 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update a calculation with calculationId 'calc_123' if the calculation document contains 'uid': 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a calculation with calculationId 'calc_123' if the calculation document contains 'uid': 'user_abc'.
     * @principle Enforces document ownership for all operations on calculations.
     */
    match /calculations/{calculationId} {
      // Allow anyone to read any calculation
      allow get: if isSignedIn() && isOwner(resource.data.uid);
      allow list: if isSignedIn() && isOwner(request.auth.uid);

      // Only the owner can create a calculation, and the 'uid' field must match
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.uid;

      // Only the owner can update a calculation, and the document must exist. The 'uid' field is immutable.
      allow update: if isSignedIn() && isExistingOwner(resource.data.uid) && resource.data.uid == request.resource.data.uid;

      // Only the owner can delete a calculation, and the document must exist
      allow delete: if isSignedIn() && isExistingOwner(resource.data.uid);
    }

    // ------ Helper functions ------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}