/**
 * @fileoverview Firestore Security Rules for Cargo Calculation App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that each user can only
 * access and manage their own calculation entries. Data validation is minimized for rapid
 * prototyping.
 *
 * Data Structure:
 * All calculation data is stored under the `/calculations/{calculationId}` collection.
 * Each document contains calculation details and is associated with a specific user via the `uid` field.
 *
 * Key Security Decisions:
 * - User-specific data access is enforced via the `uid` field in each document.
 * - Only authenticated users can create, read, update, and delete their own calculations.
 * - No public data access is allowed.
 *
 * Denormalization for Authorization:
 * The `uid` field within each `/calculations/{calculationId}` document is used to
 * directly enforce ownership, avoiding the need for additional reads or complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the `/calculations/{calculationId}` collection, allowing users to manage their own calculations.
     * @path /calculations/{calculationId}
     * @allow (create) - Authenticated user creates a new calculation with a matching `uid`.
     *   - Request: `auth.uid: "user123", resource.data: { uid: "user123", ... }`
     * @allow (get) - Authenticated user retrieves their own calculation.
     *   - Request: `auth.uid: "user123", resource.data: { uid: "user123", ... }`
     * @allow (update) - Authenticated user updates their own calculation.
     *   - Request: `auth.uid: "user123", resource.data: { uid: "user123", ... }`
     * @allow (delete) - Authenticated user deletes their own calculation.
     *   - Request: `auth.uid: "user123", resource.data: { uid: "user123", ... }`
     * @deny (create) - Authenticated user attempts to create a calculation with a mismatched `uid`.
     *   - Request: `auth.uid: "user123", resource.data: { uid: "otherUser", ... }`
     * @deny (get) - Authenticated user attempts to retrieve someone else's calculation.
     *   - Request: `auth.uid: "user123", resource.data: { uid: "otherUser", ... }`
     * @deny (update) - Authenticated user attempts to update someone else's calculation.
     *   - Request: `auth.uid: "user123", resource.data: { uid: "otherUser", ... }`
     * @deny (delete) - Authenticated user attempts to delete someone else's calculation.
     *   - Request: `auth.uid: "user123", resource.data: { uid: "otherUser", ... }`
     * @principle Enforces document ownership for all operations.
     */
    match /calculations/{calculationId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read rules
      allow get: if isExistingOwner(resource.data.uid);
      allow list: if isSignedIn() && isOwner(request.auth.uid);

      // Write rules
      allow create: if isSignedIn() && isOwner(request.resource.data.uid);
      allow update: if isExistingOwner(resource.data.uid);
      allow delete: if isExistingOwner(resource.data.uid);
    }
  }
}