/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for calculation entries.
 *
 * Data Structure:
 * All calculation entries are stored in the `/calculations/{calculationId}` collection.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own calculation entries.
 * - Listing all calculations is restricted to authenticated users who own the records.
 *
 * Denormalization for Authorization:
 * - Each calculation document must contain a `uid` field that matches the user's UID. This allows for fast and simple ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the `/calculations/{calculationId}` collection, ensuring users can only access their own calculation entries.
     * @path /calculations/{calculationId}
     * @allow (create) User with UID 'user_abc' creates a new calculation entry with `uid: 'user_abc'`.
     * @deny (create) User with UID 'user_abc' attempts to create a calculation entry with `uid: 'user_xyz'`.
     * @allow (get) User with UID 'user_abc' retrieves a calculation entry with `uid: 'user_abc'`.
     * @deny (get) User with UID 'user_abc' attempts to retrieve a calculation entry with `uid: 'user_xyz'`.
     * @allow (list) User with UID 'user_abc' lists calculation entries where `uid: 'user_abc'`.
     * @deny (list) User with UID 'user_abc' attempts to list calculation entries where `uid` does not match (N/A - list is filtered on the backend).
     * @allow (update) User with UID 'user_abc' updates a calculation entry with `uid: 'user_abc'`.
     * @deny (update) User with UID 'user_abc' attempts to update a calculation entry with `uid: 'user_xyz'`.
     * @allow (delete) User with UID 'user_abc' deletes a calculation entry with `uid: 'user_abc'`.
     * @deny (delete) User with UID 'user_abc' attempts to delete a calculation entry with `uid: 'user_xyz'`.
     * @principle Enforces document ownership for all operations on calculation entries.
     */
    match /calculations/{calculationId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow anyone to read any calculation
      allow get: if isExistingOwner(resource.data.uid);
      // Allow users to list calculations if they are signed in and are the owner
      allow list: if isSignedIn() && isOwner(request.auth.uid);

      // Only allow users to create a calculation if they are signed in and the uid matches their auth id
      allow create: if isSignedIn()
                    && isOwner(request.resource.data.uid)
                    && request.resource.data.uid == request.auth.uid;

      // Only allow users to update a calculation if they are signed in and own the calculation
      allow update: if isExistingOwner(resource.data.uid)
                    && resource.data.uid == request.resource.data.uid; // Enforce immutability of uid

      // Only allow users to delete a calculation if they are signed in and own the calculation
      allow delete: if isExistingOwner(resource.data.uid);
    }
  }
}