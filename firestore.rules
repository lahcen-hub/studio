/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for calculations.
 * All calculation data is stored under the top-level `/calculations` collection.
 *
 * Key Security Decisions:
 * - Users can only read, create, update, and delete their own calculation entries.
 * - Listing of all calculations is allowed for authenticated users.
 * - Data validation is limited to checking the 'uid' field on create to ensure
 *   it matches the authenticated user's ID.  Other data types and schema
 *   validation are not enforced in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - The 'uid' field is present in each calculation document to indicate the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual calculation entries.
     * @path /calculations/{calculationId}
     * @allow (create) - User A creates a new calculation where calculation.uid == userA.uid.
     * @allow (get) - User A reads a calculation where calculation.uid == userA.uid.
     * @allow (update) - User A updates a calculation where calculation.uid == userA.uid.
     * @allow (delete) - User A deletes a calculation where calculation.uid == userA.uid.
     * @deny (create) - User A attempts to create a calculation where calculation.uid != userA.uid.
     * @deny (update) - User A attempts to update a calculation where calculation.uid != userA.uid.
     * @deny (delete) - User A attempts to delete a calculation where calculation.uid != userA.uid.
     * @principle Enforces document ownership for all operations.
     */
    match /calculations/{calculationId} {
      // Allow anyone to read any calculation
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Only the owner can create, update, or delete a calculation
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(resource.data.uid);
      allow delete: if isExistingOwner(resource.data.uid);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        /**
     * @description Checks if the user is the owner of the document and the resource exists
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}