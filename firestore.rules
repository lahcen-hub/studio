/**
 * @fileoverview Firestore Security Rules for Cargo Calculation App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that each user can only
 * access and manage their own calculation entries. Data shape is not strictly enforced to allow
 * for rapid prototyping and iteration on the data model.
 *
 * Data Structure:
 * Calculation entries are stored in the `/calculations/{calculationId}` collection.  Each
 * calculation document contains a `uid` field representing the owner.
 *
 * Key Security Decisions:
 * - Users can only access calculations they own, based on the `uid` field.
 * - Data shape is not validated, except to enforce relational integrity for the `uid` field.
 * - List operations are allowed for the owner of a calculation.
 *
 * Denormalization for Authorization:
 * The `uid` field is denormalized directly into the calculation document to avoid costly `get()` calls
 * to a separate user profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the `/calculations/{calculationId}` collection, ensuring that users
     *              can only access their own calculations.
     * @path /calculations/{calculationId}
     * @allow (create) User with UID 'user_abc' can create a calculation with calculationId 'calc_123' if request.auth.uid == 'user_abc' and request.resource.data.uid == 'user_abc'.
     * @allow (get) User with UID 'user_abc' can get a calculation with calculationId 'calc_123' if resource.data.uid == 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a calculation with calculationId 'calc_123' if resource.data.uid == 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a calculation with calculationId 'calc_123' if resource.data.uid == 'user_abc'.
     * @allow (list) User with UID 'user_abc' can list calculations if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a calculation with calculationId 'calc_123' if request.resource.data.uid != 'user_xyz'.
     * @deny (get) User with UID 'user_xyz' cannot get a calculation with calculationId 'calc_123' if resource.data.uid != 'user_xyz'.
     * @deny (update) User with UID 'user_xyz' cannot update a calculation with calculationId 'calc_123' if resource.data.uid != 'user_xyz'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a calculation with calculationId 'calc_123' if resource.data.uid != 'user_xyz'.
     * @principle Enforces document ownership for all operations on calculations, based on the `uid` field.
     */
    match /calculations/{calculationId} {
      // Helper function to check if the request is made by the owner of the calculation.
      function isOwner(calculationUid) {
        return request.auth.uid == calculationUid;
      }

      // Helper function to check if the calculation exists and the request is made by the owner.
      function isExistingOwner(calculationUid) {
        return resource != null && isOwner(calculationUid);
      }

      // Allow anyone to read the calculation if they are the owner.
      allow get: if isOwner(resource.data.uid);
      allow list: if isSignedIn() && isOwner(request.auth.uid);

      // Only allow the owner to create a calculation, and enforce `uid` immutability.
      allow create: if isSignedIn() && isOwner(request.resource.data.uid);

      // Only allow the owner to update a calculation, and enforce `uid` immutability.
      allow update: if isExistingOwner(resource.data.uid) && (request.resource.data.uid == resource.data.uid);

      // Only allow the owner to delete a calculation.
      allow delete: if isExistingOwner(resource.data.uid);
    }

    // Define the isSignedIn function.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}